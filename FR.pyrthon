import matplotlib.pyplot as plt

# Input sizes (n) you tested
n_values = [5, 10, 15, 20, 25, 30]

# Execution times (in seconds) from your C output
recursive_times = [0.003, 0.005, 0.004, 0.010, 0.015, 0.029]

# ---- Time Complexity Graph ----
plt.figure(figsize=(8, 5))
plt.plot(n_values, recursive_times, marker='o', color='red', label="Recursive")

plt.xlabel("n (Input Size)")
plt.ylabel("Execution Time (seconds)")
plt.title("Recursive Fibonacci - Time Complexity")
plt.legend()
plt.grid(True)
plt.show()

# ---- Space Complexity Graph (Theoretical O(n)) ----
space_recursive = n_values   # space grows linearly with n (stack depth)

plt.figure(figsize=(8, 5))
plt.plot(n_values, space_recursive, marker='o', color='blue', label="Recursive (O(n))")

plt.xlabel("n (Input Size)")
plt.ylabel("Space (Relative Units)")
plt.title("Recursive Fibonacci - Space Complexity")
plt.legend()
plt.grid(True)
plt.show()
